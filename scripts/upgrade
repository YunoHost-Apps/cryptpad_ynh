#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=1

email=$(ynh_user_get_info --username=$admin --key=mail)

#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="stop" --log_path="/var/log/$app/$app.log"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=1

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$install_dir" #--keep="config/config.js"
	
	chmod -R o-rwx "$install_dir"
	chown -R $app:$app "$install_dir"
fi

#=================================================
# APPLY FOLDER GROUP RIGHTS FOR WWW-DATA
#=================================================

chgrp -R www-data $install_dir

#=================================================
# CREATE A SANDBOX DOMAIN
#=================================================

# if the main domain for the app is a root domain, we create a correct sandbox subdomain
if [[ $domain == *"."* ]]; then
	sandboxdomain=sandbox.$domain
fi
# if the main domain for the app is already a sub-domain, we create a correct sandbox domain
if [[ $domain == *"."*"."* ]]; then
	sandboxdomain=sandbox-$domain
fi
# if the main domain for the app is a .local root domain, we create a correct sandbox subdomain
if [[ $domain == *".local" ]]; then
	sandboxdomain=sandbox-$domain
fi

ynh_script_progression --message="Setting up sandobx domain: $sandboxdomain" --weight=1

# We don't test that in CI
if ! [ ${PACKAGE_CHECK_EXEC:-0} -eq 1 ]; then
	# If sandboxdomain doesn't exist, create it
	if ! yunohost domain list --output-as json | jq -r .domains[] | grep -q "^$sandboxdomain\$"; then
		yunohost domain add $sandboxdomain
		yunohost domain config set $sandboxdomain -a "mail_in=0&mail_out=0"
	fi
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

env_path="$PATH"
#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=6

ynh_exec_warn_less ynh_install_nodejs --nodejs_version=$nodejs_version

#=================================================
# INSTALL CRYPTPAD
#=================================================
ynh_script_progression --message="Building $app... (this will take some time and resources!)" --weight=60

pushd "$install_dir" 
	ynh_exec_warn_less npm install --allow-root
	ynh_exec_warn_less npm install -g bower
	ynh_exec_warn_less bower update --allow-root
	ynh_exec_warn_less npm i
	ynh_exec_warn_less npm run build
popd

#=================================================
# CREATE SYSTEMD SERVICE
#=================================================
# Create a dedicated systemd config
ynh_add_systemd_config

yunohost service add $app --description="Zero Knowledge realtime collaborative editor" --log="/var/log/$app/$app.log"

#=================================================
# ADD UPGRADED CONFIG WITH SANDBOX
#=================================================
ynh_script_progression --message="Updating a configuration file..." --weight=1

CONF=$install_dir/config/config.js
if test -f "$CONF"; then
    	supportMailboxKey=$(ynh_read_var_in_file --file=$CONF --key=supportMailboxPublicKey)
	adminKeys=$(ynh_read_var_in_file --file=$CONF --key=adminKeys)
	echo $supportMailboxKey
	echo $adminKeys
fi

ynh_add_config --template="../conf/config.js" --destination="$install_dir/config/config.js"

chmod 600 "$install_dir/config/config.js"
chown $app "$install_dir/config/config.js"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="start" --log_path=systemd --line_match="server available"

#=================================================
# COPY NGINX CONF IN SANDBOX DOMAIN
#=================================================

# We don't test that in CI
if ! [ ${PACKAGE_CHECK_EXEC:-0} -eq 1 ]; then
	if [ -n "$sandboxdomain" ]; then
		ynh_add_config --template="nginx.conf" --destination="/etc/nginx/conf.d/$sandboxdomain.d/$app.conf"
	fi
fi

# We authorize access to sandbox domain
# We don't test that in CI
if ! [ ${PACKAGE_CHECK_EXEC:-0} -eq 1 ]; then
	ynh_permission_url --permission="main" --add_url=$sandboxdomain --auth_header=true
fi

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
